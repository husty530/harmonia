<div class="container-fluid" style="padding: 0">
  <div class="row">
    <div class="col-9" style="padding: 0; text-align: left">
      <input type="range" class="form-range w-50" min="@Min" max="@Max" step="@Step" id=@_id value=@Value @onchange=onChanged>
      <label for=@_id class="form-label">@(Value + SuffixText)</label>
    </div>
    <div class="col-1" style="padding: 0">
      <button type="submit" class="btn btn-outline-info btn-sm" @onclick=onSubmitted>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16"><path d="M.989 8 .064 2.68a1.342 1.342 0 0 1 1.85-1.462l13.402 5.744a1.13 1.13 0 0 1 0 2.076L1.913 14.782a1.343 1.343 0 0 1-1.85-1.463L.99 8Zm.603-5.288L2.38 7.25h4.87a.75.75 0 0 1 0 1.5H2.38l-.788 4.538L13.929 8Z"></path></svg>
      </button>
    </div>
  </div>
</div>

@code {

  string _id = Guid.NewGuid().ToString();

  [Parameter]
  public int Value { get; set; }

  [Parameter]
  public int Min { get; set; }

  [Parameter]
  public int Max { get; set; }

  [Parameter]
  public int Step { get; set; } = 1;

  [Parameter]
  public string SuffixText { get; set; } = "";

  [Parameter]
  public EventCallback<int> OnChanged { get; set; }

  [Parameter]
  public EventCallback<int> OnSubmitted { get; set; }

  async Task onChanged(ChangeEventArgs e)
  {
    if (int.TryParse(e.Value.ToString(), out var val))
    {
      Value = val;
      await OnChanged.InvokeAsync(Value);
    }
  }

  async Task onSubmitted()
  {
    await OnSubmitted.InvokeAsync(Value);
  }

}