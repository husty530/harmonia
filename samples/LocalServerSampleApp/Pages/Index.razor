@page "/"
@inject IDictionary<string, IAgent> Agents
@inject ArcGisJsInterop Gis
@inject string[] MapFilePaths
@inject IObservable<long> Timer

<SideBar>

  <ButtonGroup>
    @if (_agent.IsActive)
    {
      <ButtonItem Text="Disconnect" Theme="danger" OnClicked="_agent.Close" />
    }
    else
    {
      <ButtonItem Text="Connect" Theme="primary" OnClicked="_agent.Open" />
    }
  </ButtonGroup>

  @if (_agent.IsActive)
  {

    <ButtonGroup>
      @if (_agent.TryGet<int>("status", out var status) && status > 0)
      {
        <ButtonItem Text="Stop" Theme="warning" OnClicked="@(() => _agent.Set("run", "False"))" />
      }
      else
      {
        <ButtonItem Text="Start" Theme="success" OnClicked="@(() => _agent.Set("run", "True"))" />
      }
    </ButtonGroup>

    @if (_agent.TryGet<int>("status", out var status) && status is 1 or 2)
    {
      <ButtonGroup>
        <ButtonItem Checked="@(status is 1)" OnClicked="@(() => _agent.Set("auto", "False"))" Text="Manual" />
        <ButtonItem Checked="@(status is 2)" OnClicked="@(() => _agent.Set("auto", "True"))" Text="Auto" />
      </ButtonGroup>
    }

  }

  <br /><br />
  <Label>Load Map</Label>
  <ButtonGroup IsVertial=true>
    @foreach (var path in MapFilePaths)
    {
      <ButtonItem Text="@Path.GetFileName(path)" Checked="@(path == _mapPath)"
        Outline="@true" Theme="secondary" OnClicked="async () => await LoadMapAsync(path)" />
    }
  </ButtonGroup>

  @if (_mapInstance is WgsMap map)
  {
    <ButtonGroup IsVertial=true>
      @foreach (var (path, i) in map.Paths.Select((x, i) => (x, i)))
      {
        <ButtonItem Text="@path.Id" Checked="@(_selectedIndexList.Contains(i))"
          Outline="true" Theme="secondary" Multiple=true OnChanged="async e => await SelectPathAsync(e, i)" />
      }
    </ButtonGroup>
  }

  <br /><br />
  <Table Header="@(new("key", "value"))" Body="@_agent.Profile.OrderBy(c => c.Key).ToDictionary(x => x.Key, x => x.Value)" />

</SideBar>

<WebMap />

@code {

  string _id => Agents.Keys.FirstOrDefault()!;
  IAgent _agent => Agents.Values.FirstOrDefault()!;
  string? _mapPath;
  WgsMap? _mapInstance;
  List<int> _selectedIndexList = new();

  async Task LoadMapAsync(string filePath)
  {
    _selectedIndexList = new();
    var txt = File.ReadAllText(filePath);
    if (System.Text.Json.JsonSerializer.Deserialize<Jmap>(txt) is Jmap jmap && jmap.ToMap(filePath) is WgsMap map)
    {
      _mapPath = filePath;
      _mapInstance = map;
      await Gis.RemoveAllAsync(_id);
      await Gis.RegisterMapAsync(_id, map, Color.Blue);
      await Gis.ShowMapAsync(_id);
    }
  }

  async Task SelectPathAsync(ChangeEventArgs e, int index)
  {
    if (_mapInstance is WgsMap map && bool.TryParse(e.Value!.ToString(), out var on))
    {
      if (on) _selectedIndexList.Add(index);
      else _selectedIndexList.Remove(index);
      await Gis.SetColorAsync(_id, index, on ? Color.Red : Color.Blue);
    }
  }

  protected override Task OnInitializedAsync()
  {
    Timer.Subscribe(async _ =>
      {
        if (
          _agent.TryGet<double>("latitude", out var lat) &&
          _agent.TryGet<double>("longitude", out var lon) &&
          _agent.TryGet<double>("heading", out var heading) &&
          _agent.TryGet<int>("status", out var status)
        )
        {
          await Gis.PutMarkerAsync(_id, new WgsPoint(_id, lat, lon), heading, Color.Blue);
        }
        await InvokeAsync(StateHasChanged);
      });
    return Task.CompletedTask;
  }

  public record class Jmap(List<int> Orders, WgsMap Map)
  {
    public WgsMap ToMap(string name)
    {
      var list = new List<WgsPath>();
      foreach (var i in Orders)
        list.Add(new($"{i}.{Map.Paths[i - 1].Id}", Map.Paths[i - 1].Points));
      return new(name ?? Map.Name, list);
    }
  }

}
